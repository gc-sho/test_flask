swagger: '2.0'
basePath: "/api/v1"
info:
  title: Test Flask
  description: Test Flask api for testing
  version: 0.0.1
produces:
  - application/json
paths:
  
  "/user":
    get:
      produces:
        - application/json
      description: Get user/users
      operationId: users
      responses:
        200:
          description: Gets user or list of users if id is not provided
          schema:
            '$ref': '#/definitions/User'
      schemes:
        - http
        - https
      summary: Gets user or list of users if id is not provided
      tags:
        - User

    post:
      produces:
        - application/json
      consumes:
        - application/json
      description: Create user
      operationId: user
      parameters:
        - in: body
          name: params
          description: Parameters for user model
          schema:
              '$ref': '#/definitions/User'
      responses:
        200:
          description: Create user
          schema:
            '$ref': '#/definitions/User'
      schemes:
        - http
        - https
      summary: Gets user or list of users if id is not provided
      tags:
        - User
        
  "/user/{id_user}":
    get:
      produces:
        - application/json
      description: Get user/users
      operationId: users
      parameters:
        - in: path
          name: id_user
          description: user id
          type: string
          required: True
      responses:
        200:
          description: Gets user or list of users if id is not provided
          schema:
            '$ref': '#/definitions/UserNoPassword'
      schemes:
        - http
        - https
      summary: Gets user or list of users if id is not provided
      tags:
        - User

    post:
      produces:
        - application/json
      consumes:
        - application/json
      description: Update user
      operationId: user
      parameters:
        - in: path
          name: id_user
          description: user id
          type: string
          required: True
        - in: body
          name: params
          description: Parameters for user model
          schema:
              '$ref': '#/definitions/UserNoPassword'
          discriminator:
            propertyName: password
      responses:
        200:
          description: Create user
          schema:
            '$ref': '#/definitions/UserNoPassword'
      schemes:
        - http
        - https
      summary: Updates users basic info
      tags:
        - User

definitions:
  Error:
    type: object
    properties:
      message:
        type: string
        description: Something went wrong
  UserDefault:
    type: object
    properties:
      name: 
        type: 'string'
        description: 'Users fullname'
      city: 
        type: 'string'
        description: 'City'
      state: 
        type: 'string'
        description: 'State'
      email: 
        type: 'string'
        description: 'Users email address'
      address: 
        type: 'string'
        description: 'Address'
  UserNoPassword: 
    allOf:
      - $ref: '#/definitions/UserDefault'
      - type: object
  User: 
    allOf:
      - $ref: '#/definitions/UserDefault'
      - type: object
        properties:
          password: 
            type: 'string'
            description: 'Password'
      